#!/bin/bash

usage='WSHC.sh <URL> <Expected Status code> <HTTP Method for Requests> \n status code format: 200|301'

red=`tput setaf 1`
bg=`tput setab 7`
reset=`tput sgr 0`
n=0
count=0
time='  HTTP Status:	%{http_code}
	time_namelookup:  %{time_namelookup}s\n
        time_connect:  %{time_connect}s\n   
     time_appconnect:  %{time_appconnect}s\n 
    time_pretransfer:  %{time_pretransfer}s\n
       time_redirect:  %{time_redirect}s\n     
  time_starttransfer:  %{time_starttransfer}s\n   
          time_total:  %{time_total}s\n'
          
#Calculating Average Response Time
touch ./currenttime.txt
rm ./avgrsptime.txt && touch ./avgrsptime.txt
while [ $n -lt 5 ] ;
do
	echo "Calculating Average Response Time"
	curl -s -o /dev/null -I -w "%{time_total}" $1 >> ./avgrsptime.txt
	n=$(($n+1))
	sleep 1
done

#Average Response Time Calc
avg1=$(awk '{s+=$1}END{print s/NR}' ./avgrsptime.txt)
echo "Average is $avg1"
#Doubling Response Time for Unhealthy Response Time
average=$(awk "BEGIN {print ($avg1*2)}")
echo "$average"

#Checking HTTP Method
if [[ $3 == "HEAD" ]] ; then
	method="-I"
else
	method="-X $3"
fi

#Monitoring Loop
while true
do
	#monitor HTTP status
	clear
	echo "======================"
	echo "Monitoring $1"
	echo "Expected status $2"
	echo "Using HTTP Method $3"
	echo "Average Response Time Was $avg1"
	echo "======================"
	#HTTP Status Check
	curl -s -o /dev/null $method -w "%{http_code}\n%{time_total}" $1 > status.txt
	if [[ $(head -1 ./status.txt) != $2 ]] ; then
		printf ${red}${bg}"WARNING Unexpected STATUS: "${reset}
		head -1 ./status.txt
		count=$(($count+1))
		printf "\r\n count: "$count
		notify-send -u normal -t 5000 "$count Unexpected Status Events"
	else
		echo "HTTP Status is $2"
	fi
	#Response Time Check
	currenttime=$(tail -1 ./status.txt)
	if [[ $currenttime > $average ]] ; then
		echo "help"
	fi
	
	sleep 5
done
